FFS;
PageWidth=1024;
$LibDir="measopt/new/";
$RingID="%(RING)s";
$MeasFile=Null;
(* commandline option parser *)
Module[{argv,narg},
  argv=$CommandLine[];
  narg=Length[argv];
  If[narg<=>2,Print["Invalid numer of arguments."];Exit[]];
  $MeasFile=argv[[2]];
];
Print[$MeasFile];
If[~FileQ[$MeasFile],Print["Not such file."];Exit[];];



LoadRawData[fname_String]:=Module[{date,data,st,k0n,k0,dt,head,body},
  data=Get[fname];
  head=First[data];
  body=Last[data];
  With[{axis=#[[1]],hv=#[[2]]},
    CodData[axis]=("Cod"//axis//"Data")/.body;
    RefCod[axis]=("RefCod"//axis)/.body;
    Steering[axis]=CodData[axis][[,1]][[,1]];
    Kick[axis]=CodData[axis][[,1]][[,2]];
  ]&/@{{"X","H"},{"Y","V"}};
  $RingID=If[CodData["X"][[1,2,1,1]]==="MQC1LE","HER","LER"];
  Library@Require[$RingID//"Optics"];
  Ring=Switch[$RingID,
    "LER",LEROptics[],
    "HER",HEROptics[]
  ];
  Library@Require[$LibDir//"BetaAnalysis"];
  BetaAna=BetaAnalysis[];
  BetaAna@Ring=Ring;
  BpmList=Ring@BPMNames[];

  optf="OpticsFile"/.head;
  If[optf<=>Null,r=Ring@ReadOpticsFile[optf]];
  If[Not[r],Print["Failed to plot OpticsFile: "//optf];Exit[]]; 
  TuneData["global"]={};TuneData["gated"]={};
  If[("TuneData"/.body)<=>"TuneData",TuneData["global"]="TuneData"/.body];
  If[("GatedTuneData"/.body)<=>"GatedTuneData",TuneData["gated"]="GatedTuneData"/.body];
  If[TuneData["global"]==={},
    Print["Measure tune is missing because the code was under developmemt and had a bug."];
    Print["The model tune is used instead."];
    TuneData["global"]=Twiss[{"NX","NY"},"$$$"]/2/Pi;
  ];
];
LatticeSteering[st_String]:=Module[{r},
  r=With[{elm=#,bg=Ring@Backleg[#]},Rule[elm,Flatten[{If[bg<=>Undefined,bg,elm]}]]]&/@(Ring@AllSteerings[]);
  st/.r
];
LatticeSteering[st_List]:=LatticeSteering[#]&/@st;

vFitMaxItr=20000;
MaxItrBruteForce = 20000;
vFitTol=1e-7;
vSolverTol=1e-12;
DoAnalysis$[axis_:"X"]:=Module[{nu,indx,unit=1e-3,cod,flg,str,bpms,solv,strl,pestr,circ,mcp,pem,de},
  tune=If[TuneData["gated"]==={},TuneData["global"],TuneData["gated"]];
  flg=(1)&/@BpmList;
  indx=If[axis==="X",2,3];
  mdata=CodData[axis];
  kicks=mdata[[,1]][[,3]];
  str=mdata[[,1]][[,1]];

  (* Evaluate COD caused by dispersion@steerings *)
  (* will be subtracted from measured COD *)
  strl=LatticeSteering[#]&/@str;
  pestr=With[{st=#},Plus@@(Twiss["PE"//axis,#//"+0.5"]&/@st)]&/@strl;
  circ=LINE["S","$$$"]-(Twiss["DZ","$$$"]-Twiss["DZ","^^^"]);
  mcp=(1/Twiss["GAMMA","$$$"]/Twiss["GAMMA","$$$"]+MomentumCompaction)/.Emittance[ExpandElementValues->False];
  pem=Twiss["PE"//axis,BpmList];
  de=With[{ps=#[[1]],k=#[[2]]},k/circ/mcp*ps*pem]&/@Thread[{pestr,kicks}];
  (*                                             *)

  mycod=MapThread[Thread[{BpmList,Ring@OrbitSigns[[indx-1]]*unit*(#1[[2]][[,indx]])-#2,flg*#1[[2]][[,-1]]}]&,{mdata,de}];
  mycod=Transpose[Select[Transpose[mycod],Times@@#[[,-1]]&]];

  ngb={};
  cod=If[ngb<=>{},
    With[{dx=#},
      pos=Flatten[Position[dx[[,1]],#]&/@ngb,1];
      mydx=dx;
      Do[mydx=ReplacePart[mydx,{mydx[[ pos[[ip,1]],1 ]], mydx[[ pos[[ip,1]],2 ]]  ,0},pos[[ip]]],{ip,Length[pos]}];
    mydx]&/@mycod,
    mycod
  ];

  cod=With[{dx=#},Select[dx,(#[[-1]]===1)&]]&/@cod;
  bpms=cod[[1]][[,1]];
  cod=(#[[,2]])&/@cod;
  flg=Table[Table[1,{Length[bpms]}],{Length[Flatten[strl[[,1]]]]}];
  Print["# of NG Bpms = "//Length[BpmList]-Length[bpms]//"/"//Length[BpmList]];

  BetaAna@Initialize[cod,flg,Axis->axis,Tune->tune,Monitors->bpms,Steering->Flatten[strl[[,1]]]];
  solv = BetaAna@Solve["BruteForce",
    MaximumIteration->MaxItrBruteForce, FittingTolerance->vFitTol,
    Tolerance->SolverTol,AdjustTune->False,
    ProgressCommand:>(Progress["BruteForce", ##]&)];
  bx1=Thread[{bpms,solv[[1,1]],Table[1,{Length[bpms]}]}];
  px1=Thread[{bpms,solv[[1,2]],Table[1,{Length[bpms]}]}];
  bx2={#,0,0}&/@Complement[BpmList,bpms];
  px2={#,0,0}&/@Complement[BpmList,bpms];
  bx=Sort[Join[bx1,bx2],If[LINE["POSITION",#1[[1]]]<LINE["POSITION",#2[[1]]],True,False]&];
  px=Sort[Join[px1,px2],If[LINE["POSITION",#1[[1]]]<LINE["POSITION",#2[[1]]],True,False]&];
  data=Thread[{bx[[,1]],bx[[,2]],px[[,2]],bx[[,-1]]}];

  Return[{data,Residual/.Rest[solv]}];
];

LoadRawData[$MeasFile];
solx=DoAnalysis$["X"];
soly=DoAnalysis$["Y"];
BetaData=Thread[{BpmList,solx[[1]][[,2]],soly[[1]][[,2]],solx[[1]][[,3]],soly[[1]][[,3]],solx[[1]][[,-1]]*soly[[1]][[,-1]]}];
data={Rule["BetaData",BetaData],
      Rule["TuneData",tune],
Null[]};

f=OpenWrite[GetDirectory[]//"/COD_Beta_Phase.txt"];
Write[f,data];
Close[f];

Exit[];


